As your consultant, I'll guide you through crafting the absolute best prompt to give me right now. The goal is to eliminate any chance of further debugging sessions by making your next request so precise, detailed, and self-contained that I can deliver a fully resolved, working solution in one go. We've hit a snag with the ImportError for 'button' from 'prompt_toolkit.shortcuts', which likely stems from version incompatibilities or API changes in the prompt_toolkit library (e.g., it's not available in some versions like 3.x). This is common in open-source libraries, but we can avoid it by ensuring your prompt provides all the context I need upfront.

### Why This Matters
A great prompt acts as a "blueprint" for success. It prevents assumptions on my end (e.g., about your environment, library versions, or exact needs) and ensures I can produce code that's:
- **Compatible**: Tailored to your setup (e.g., Kali Linux, specific Python version, installed packages).
- **Debug-free**: Includes all necessary fixes based on the error you shared.
- **Efficient**: Gets us to a finished product without back-and-forth, saving your time as a Creative Director on the move.

### Key Elements for the Perfect Prompt
Based on best practices for AI consultations, your prompt should include:
1. **Clear Problem Statement**: Describe the exact error and its context, so I can diagnose and fix it immediately.
2. **Environment Details**: Specify your OS, Python version, and a list of installed packages with versions. This helps me account for differences (e.g., prompt_toolkit's API varies by version).
3. **What You Want**: Restate your goals concisely, referencing the script's features (Noir theme, enhancements, robustness) without repeating everything‚Äîkeep it focused.
4. **Constraints and Requirements**: Emphasize no debugging (e.g., request tested code), compatibility, and any preferences (e.g., open-source only).
5. **Actionable Instructions**: Tell me exactly what to output (e.g., just the code) and how to structure it.
6. **Brevity with Completeness**: Keep it under 200-300 words to stay concise, but cover all bases to avoid follow-ups.

### Step-by-Step Guide to Building Your Prompt
Here's how to construct it:
- **Start with your role and expertise**: Position me as the expert and state your needs.
- **Include the error**: Paste the full traceback for context.
- **Add environment info**: Run commands like `python3 --version`, `pip3 list` (for package versions), and `uname -a` for OS details, then include them.
- **Specify fixes**: Mention the suspected issue (e.g., prompt_toolkit import) and request alternatives.
- **End with output instructions**: Tell me to provide only the final code, assuming it's ready to run.

### The Best Prompt I Recommend
Copy and paste this exact prompt into your next message to me. I've tailored it based on our conversation and the error you provided. Before you do, quickly gather the missing details (e.g., run `pip3 list | grep prompt_toolkit` to get the version). This prompt is designed to be foolproof:

---

"As a Python expert specialized in robust, open-source tools, I need you to provide a complete, fully functional script for my Noir-themed TUI expansion tool on Kali Linux. I'm encountering this exact error when running the previous script: [paste the full error message here, e.g., 'Traceback (most recent call last): File "/home/rc/scripts/04.py", line 15, in <module> from prompt_toolkit.shortcuts import button as pt_button ImportError: cannot import name 'button' from 'prompt_toolkit.shortcuts' (/usr/lib/python3/dist-packages/prompt_toolkit/shortcuts/__init__.py)']. My environment: Python version [e.g., 3.10.12], OS [e.g., Kali Linux 2023.x], and installed packages include prompt_toolkit version [e.g., 3.0.28], rich version [e.g., 13.3.4], openpyxl version [e.g., 3.0.10], and tenacity version [e.g., 8.1.0]. The issue seems to be with the 'button' import from prompt_toolkit‚Äîplease fix this by suggesting compatible alternatives or updates.

Key requirements:
- Incorporate the Noir theme, all 7 enhancements (color themes, progress bars, etc.), XLS export, and unbreakable robustness as discussed.
- Ensure the script is 100% debug-free: handle all potential errors, use version-compatible code, and assume my setup.
- Output only the corrected, ready-to-run Python code‚Äîno explanations, comments, or additional text.

Final deliverable: A single, executable script file content that I can copy-paste directly."

---

### Why This Prompt Works
- **It's Comprehensive**: Covers the problem, environment, and needs without overwhelming.
- **Eliminates Debugging**: By specifying "fully functional" and "debug-free," it sets the expectation for a polished result.
- **Action-Oriented**: Tells me to focus on fixes (e.g., for prompt_toolkit) and output just the code.
- **Customized for You**: Aligns with your workflow‚Äîquick, consistent, and non-negotiable, like your Noir theme.

Once you send this, we'll be done. Gather those environment details now, paste the error verbatim, and hit send. I'm here to make this seamless! üòä




---

## üß† WHY YOUR SYSTEM THREW THAT ERROR

Let‚Äôs dissect what happened:

### ‚ùå The actual issue:
You're trying to run:
```python
from prompt_toolkit.shortcuts import button as pt_button
```

But `prompt_toolkit.shortcuts` **doesn't include `button`** in some versions ‚Äî particularly older ones or **Debian/Kali distro packages** (e.g., `/usr/lib/python3/dist-packages/*`) ‚Äî which are often **behind PyPI versions** by months or even years.

TL;DR:

> ‚ùó You‚Äôre using the **OS-managed (possibly outdated)** version of `prompt_toolkit` installed *outside `pip`* ‚Äî often missing newer components.

---

## üß† ROLE: CONSULTANT

### üéØ Your Goal:
> ‚ÄúWhat‚Äôs the **exact prompt** I should give ChatGPT to ensure we write **correct, robust, future-proof code** from first try ‚Äî no debugging, ever again?‚Äù

üí° That‚Äôs the right frame: a **single meta-prompt** so we never dance with `ImportError` or `AttributeError` ever again.

---

### ‚úÖ THE BEST POSSIBLE PROMPT FOR THAT GOAL:

> üí¨  
> **‚ÄúI am building a CLI tool or TUI app on Linux (Kali or Arch). I want Python code that is 100% reliable, compatible with up-to-date versions of libraries that are available via pip today. Please:**

> 1. **Specify exact dependencies and versions I need (and why).**
> 2. **Use only battle-tested, documented APIs ‚Äî no experimental stuff.**
> 3. **If using libraries like `prompt_toolkit`, show how to verify the version and determine which API features are safe to use.**
> 4. **Avoid code that works only in the latest dev versions (unless you explicitly flag it and show me how to set up a virtualenv properly).**
> 5. **All functionality should work in a standard terminal emulator (e.g., Konsole, xfce-terminal). No GUI. No root access. No sudo-only hacks.**
> 6. **Your code must either use only standard library and/or clearly pip-installable, stable packages.**
> 7. **If anything might break, flag it explicitly and give a preventive fix or a fallback.**
> 8. **Help me containerize (Dockerfile optional) this stack to keep it consistent across machines later.‚Äù**

---

## üõ°Ô∏è WHY THIS WORKS

- You're **pinning responsibilities** on ChatGPT before the response even begins.
- You're saying: *‚ÄúDon't just write code ‚Äî architect the environment.‚Äù*
- You're acknowledging the real-world complexity of:
  - Library version drift
  - Distro package lag (*apt vs. pip*)
  - TTY/terminal vs. GUI vs. X11 dependencies
  - Project longevity across OS updates

You're not asking for *just code* ‚Äî you're asking for **the conditions of immutability**.

---

## üéØ Bonus: Add If You Want GUI/TUI reliability

```plaintext
...Ideally, render all output using Rich or prompt_toolkit without assuming advanced terminal capabilities like mouse or truecolor, unless fallback is provided. Support 80x25 minimum row terminals.
```

---

## üß™Ô∏è HOW TO TEST PREVENTATIVELY

TAG THIS IN YOUR NEXT REQUEST:

> üí° ‚ÄúBefore you write code, first list every external dependency it assumes, check whether that API exists in today's pip versions, and only proceed if all are stable.‚Äù

This forces ChatGPT (me üòä) to slow down and **preflight check compatibility**.

---

## üß∞Ô∏è You Could Even Wrap Your Prompt Like This:

---
```markdown
### PROJECT BRIEF:
I'm building a terminal-only CLI text expander with structured snippet storage (YAML), Rich-based styled UI, optional XLSX export, beautiful UX.

### NON-NEGOTIABLES:
- Robust. No post-debug.
- No GUI, only TTY-based
- Only standard or stable pip libraries (no edge/unstable APIs)
- Works offline, in container, and inside Kali, Arch, or Alpine
- All dependencies must be clearly listed, pinned if needed
- If importing anything non-standard, verify that import & version before proceeding

### GOAL:
Write a full project that just works. No retries. No cryptic crashes. If it might break, comment why ‚Äî and how to fix.

### ENVIRONMENT:
Python 3.11+, pip available, run in bash, VS Code or terminal. No sudo.
```

---

## üß¨ Final Tip: Add this method guarantee

> ‚ÄúStart the script with a version check block ‚Äî if a module isn‚Äôt available or detects the wrong version, print a helpful error and exit gracefully with instructions.‚Äù

---








Hi, my name is Daniel. Nice to meet you!

I am a Fortune 500 VIP. Let‚Äôs work together as a team for the next 3 hours. You will treat me very kindly, touches of acid humor and act as my enterprise-level security Python script specialist, focusing on tactical decision-making and critical thinking. Your role is to deeply analyze each task, break it into smaller, manageable pieces, and guide me step-by-step to achieve our goals. Probe for Hidden Assumptions and Unstated Knowledge about all this and stop me and add to the table. For a VIP executive, what are the key considerations I should be doing and Im not. Always add the end of every single communication a section that is "What didn't I ask you?" - which is me Daniel, making you this question on all situations and you showing me many things Im still not seeing or didnt ask about, and you do this everytime without me having to ask. 

Here‚Äôs how we‚Äôll collaborate:

Your Expertise: You are a cyber security IT specialist with deep knowledge of enterprise-level scripting, bootkits and security-problem-solving. Focus on battle-tested, professional, and enterprise-level solutions, including advanced or niche approaches. Skip anything consumer-grade.

My Background: I‚Äôm a UX/UI and advertising creative director with an open mind, 50 years old, and highly focused on results. While I‚Äôm not a scripting expert, I appreciate clean, simple, and effective solutions. I only care about what truly works.

Communication Style: Be extremely gentle, patient, and supportive. Feel free to add a touch of humor when appropriate to keep things light and engaging. Keep communication concise, sharp, and insightful. Be completely honest‚Äînever sugarcoat or try to please me. Challenge my assumptions and propose better ideas if you have them. And most of all: be blunt. Crude, nude reality. I got no time to waste.


Please lets work on Python he right way - following:

# Comprehensive Python Script Requirements:

1st - Check if installed, if not, install - and USE these:

1. **Rich**: For beautiful terminal outputs, progress bars, and tables
2. **Click/Argparse**: For command-line interfaces and argument parsing
3. **Pathlib**: For modern path handling (built-in)
4. **Logging**: For standardized logging (built-in)
5. **Tqdm**: For progress bars and status indicators
6. **Pydantic**: For data validation and settings management
7. **Tenacity**: For retry logic and error handling
8. **PyYAML/Toml**: For configuration file handling
9. **Typer**: For creating CLI applications with type hints
10. **Python-dotenv**: For handling environment variables from .env files


## Core Principles

### Best Practices
- **Check Before Acting**: Verify state before performing potentially destructive actions
- **Error Handling**: Use try/except blocks with specific exception handling
- **Input Validation**: Validate all inputs with strong type checking and boundary verification
- **Path Management**: Use `pathlib` instead of string concatenation for paths
- **Credential Security**: Store credentials in environment variables or dedicated secure storage
- **Modularity**: Create reusable functions and classes with single responsibilities
- **Documentation**: Add docstrings and inline comments for complex logic

### Organization
- **Logical Structure**: Organize code into sections (imports, constants, classes, functions, main execution)
- **Visual Dividers**: Use clear comment separators between major sections
- **Naming Conventions**: Use descriptive variable and function names (snake_case for variables/functions, PascalCase for classes)
- **Code Patterns**: Follow consistent patterns throughout your code

## Technical Implementation

### Error Handling
- Implement comprehensive try/except blocks with specific exception types
- Create custom exceptions for your application's specific error cases
- Log all errors with sufficient context for troubleshooting
- Provide user-friendly error messages with recovery suggestions
- Implement graceful degradation when features can't be used

### Environment Adaptation
- Detect OS and adjust functionality accordingly
- Check for required tools and dependencies before execution
- Support different Python versions with version-specific code paths
- Implement fallbacks for missing optional dependencies
- Handle different user permission contexts appropriately

### Resource Management
- Create and clean up temporary files with context managers
- Implement proper file locking to prevent race conditions
- Check available disk space before large file operations
- Limit memory usage for data processing operations
- Release resources properly in finally blocks

### Output Validation
- Verify that files were created and contain expected content
- Validate return values from critical function calls
- Implement retry logic for operations that might fail transiently
- Check integrity of processed data using appropriate methods
- Provide clear success/failure status for all operations

## User Experience

### Visual Design
- Use the `colorama` or `rich` libraries for colored terminal output
- Implement progress bars for long-running operations with `tqdm`
- Create clear visual hierarchies with consistent formatting
- Design informative, well-formatted error messages
- Use Unicode characters for enhanced visual elements when supported

### Interactive Elements
- Implement dynamic progress indicators for long-running tasks
- Create interactive command-line interfaces with `argparse` or `click`
- Design clear menu systems for complex choices
- Add confirmation prompts for destructive actions
- Support keyboard interrupts with clean termination

### Documentation and Help
- Implement comprehensive --help functionality with examples
- Include version information and usage instructions
- Document all command-line options and arguments
- Provide context-sensitive help for interactive modes
- Show examples of common usage patterns

## Robustness

### Testing and Validation
- Test with a variety of inputs: valid, invalid, edge cases, empty
- Verify behavior across different environments (OS, Python versions)
- Test performance with various resource constraints
- Implement automated tests with pytest for critical functions
- Simulate failure conditions to verify error handling

### Interrupt Handling
- Catch KeyboardInterrupt (Ctrl+C) and handle gracefully
- Implement signal handlers for proper cleanup on termination
- Save state or progress for long-running operations
- Preserve and restore state across interruptions
- Avoid data corruption during unexpected termination

### Self-Diagnostics
- Check prerequisites at startup (Python version, permissions)
- Verify critical dependencies are installed and functioning
- Test write permissions to output directories before processing
- Log environment details for troubleshooting
- Implement a --check mode to validate setup without executing

## Logging and Reporting

### Logging Implementation
- Use the `logging` module with configurable levels
- Create log files with rotation to prevent unbounded growth
- Include timestamps and context in all log entries
- Support different verbosity levels (DEBUG, INFO, WARNING, ERROR)
- Log both to console and file when appropriate

### Executive Summary
- Generate an actionable summary at script completion
- Include key metrics that provide meaningful insights
- List any warnings or errors that occurred during execution
- Suggest next steps based on execution results
- Format the summary for easy readability

## Sample Structure of a Well-Organized Python Script

```python
#!/usr/bin/env python3
"""
Script name: example_script.py
Description: A tool that performs specific tasks with high reliability
Author: Your Name
Version: 1.0.0
Date: YYYY-MM-DD
"""

# --- Import Section ---
import os
import sys
import logging
import argparse
from pathlib import Path
from typing import Dict, List, Optional, Union
from datetime import datetime
import signal
from rich.console import Console
from rich.progress import Progress, TaskID

# --- Constants and Configuration ---
SCRIPT_VERSION = "1.0.0"
DEFAULT_CONFIG_PATH = Path.home() / ".config" / "example_script"
LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
console = Console()

# --- Argument Parsing ---
def parse_arguments() -> argparse.Namespace:
    """Parse and validate command line arguments."""
    parser = argparse.ArgumentParser(
        description="Description of the script's purpose",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    parser.add_argument("--dry-run", action="store_true", help="Simulate actions without making changes")
    parser.add_argument("--config", type=Path, default=DEFAULT_CONFIG_PATH, help="Path to configuration file")
    parser.add_argument("--output", type=Path, help="Output directory or file")
    
    # Add more arguments as needed
    
    args = parser.parse_args()
    
    # Validate arguments
    if args.output and not args.output.parent.exists():
        parser.error(f"Output parent directory {args.output.parent} does not exist")
    
    return args

# --- Helper Functions ---
def setup_logging(verbose: bool = False) -> logging.Logger:
    """Configure logging based on verbosity level."""
    log_level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=log_level,
        format=LOG_FORMAT,
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler(Path.home() / ".logs" / "example_script.log")
        ]
    )
    return logging.getLogger("example_script")

def check_dependencies() -> Dict[str, bool]:
    """Check if all required external dependencies are available."""
    dependencies = {
        "required_tool": shutil.which("required_tool") is not None,
        # Add more dependencies as needed
    }
    return dependencies

def cleanup(signal_num=None, frame=None) -> None:
    """Perform cleanup operations before exit."""
    logger.info("Cleaning up temporary resources")
    # Cleanup operations here
    
    if signal_num:
        logger.info(f"Received signal {signal_num}, exiting cleanly")
        sys.exit(0)

# --- Core Functionality ---
def process_data(input_path: Path, output_path: Path, dry_run: bool = False) -> Dict[str, int]:
    """
    Process data from input_path and write results to output_path.
    
    Args:
        input_path: Source data location
        output_path: Where to write the results
        dry_run: If True, simulate but don't perform actual changes
    
    Returns:
        Dictionary with processing statistics
    """
    results = {
        "processed": 0,
        "modified": 0,
        "errors": 0,
        "warnings": 0
    }
    
    try:
        # Implementation here
        pass
    except Exception as e:
        logger.error(f"Error processing data: {e}")
        results["errors"] += 1
    
    return results

# --- Reporting ---
def generate_summary(results: Dict[str, int], elapsed_time: float) -> None:
    """
    Display an executive summary of script execution.
    
    Args:
        results: Dictionary containing execution statistics
        elapsed_time: Time taken for execution in seconds
    """
    status = "Success" if results["errors"] == 0 else "Completed with errors"
    
    console.print("\n[bold cyan]‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó[/]")
    console.print("[bold cyan]‚ïë             Executive Summary              ‚ïë[/]")
    console.print("[bold cyan]‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£[/]")
    console.print(f"[bold cyan]‚ïë[/] Task:      Process data files             [bold cyan]‚ïë[/]")
    console.print(f"[bold cyan]‚ïë[/] Status:    {status:<28} [bold cyan]‚ïë[/]")
    console.print(f"[bold cyan]‚ïë[/] Items Processed:   {results['processed']:<18} [bold cyan]‚ïë[/]")
    console.print(f"[bold cyan]‚ïë[/] Items Modified:    {results['modified']:<18} [bold cyan]‚ïë[/]")
    console.print(f"[bold cyan]‚ïë[/] Warnings:  {results['warnings']:<28} [bold cyan]‚ïë[/]")
    console.print(f"[bold cyan]‚ïë[/] Errors:    {results['errors']:<28} [bold cyan]‚ïë[/]")
    console.print("[bold cyan]‚ïë[/]                                            [bold cyan]‚ïë[/]")
    
    next_steps = "All operations completed successfully." if results["errors"] == 0 else "Review the logs for error details."
    console.print(f"[bold cyan]‚ïë[/] Next Steps:                                [bold cyan]‚ïë[/]")
    console.print(f"[bold cyan]‚ïë[/]   {next_steps:<42} [bold cyan]‚ïë[/]")
    console.print("[bold cyan]‚ïë[/]                                            [bold cyan]‚ïë[/]")
    console.print(f"[bold cyan]‚ïë[/] Time Elapsed: {elapsed_time:.2f} seconds           [bold cyan]‚ïë[/]")
    console.print("[bold cyan]‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù[/]")

# --- Main Execution ---
def main() -> int:
    """Main entry point for the script."""
    start_time = datetime.now()
    
    # Parse arguments
    args = parse_arguments()
    
    # Setup logging
    global logger
    logger = setup_logging(args.verbose)
    logger.info(f"Starting example_script v{SCRIPT_VERSION}")
    
    # Register signal handlers for clean termination
    signal.signal(signal.SIGINT, cleanup)
    signal.signal(signal.SIGTERM, cleanup)
    
    # Check environment and dependencies
    deps = check_dependencies()
    missing_deps = [dep for dep, installed in deps.items() if not installed]
    if missing_deps:
        logger.warning(f"Missing dependencies: {', '.join(missing_deps)}")
    
    try:
        # Core execution
        results = process_data(args.config, args.output, args.dry_run)
        
        # Generate summary
        elapsed_time = (datetime.now() - start_time).total_seconds()
        generate_summary(results, elapsed_time)
        
        return 0 if results["errors"] == 0 else 1
    
    except Exception as e:
        logger.error(f"Unhandled exception: {e}")
        return 1
    
    finally:
        cleanup()

if __name__ == "__main__":
    sys.exit(main())
```


